---
name: Phase 1 - Python
on: [push]

env:
  TRIVY_VERSION: 0.54.1
  SBOMASM_VERSION: 0.1.4
  SEMVER: 0.1.0

jobs:
  Container:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # We're using native docker build here rather
      # than 'docker/build-push-action' to make the run
      # more pipeline agnostic.
      - name: Build Docker image
        working-directory: "Phase 1/Python"
        run: |
          docker build -t phase-1-python .

      - name: Install Trivy
        run: |
          curl -L -o /tmp/trivy.tgz \
            "https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz"
          tar xvf /tmp/trivy.tgz -C /tmp
          chmod +x /tmp/trivy

      - name: Generate SBOM with Trivy
        working-directory: "Phase 1/Python"
        run: |
          /tmp/trivy image \
            --format cyclonedx \
            --output /tmp/container-sbom_cyclonedx.json \
            phase-1-python

          /tmp/trivy image \
            --format spdx-json \
            --output /tmp/container-sbom_spdx.json \
            phase-1-python

      - name: Upload CycloneDX SBOM
        uses: actions/upload-artifact@v4
        with:
          name: container-sbom-cyclonedx
          path: "/tmp/container-sbom_cyclonedx.json"

      - name: Upload SPDX SBOM
        uses: actions/upload-artifact@v4
        with:
          name: container-sbom-spdx
          path: "/tmp/container-sbom_spdx.json"

  Application:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          curl -L -o /tmp/trivy.tgz \
            "https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz"
          tar xvf /tmp/trivy.tgz -C /tmp
          chmod +x /tmp/trivy

      - name: "CycloneDX: Generate SBOM"
        working-directory: "Phase 1/Python"
        run: |
          /tmp/trivy fs \
            --format cyclonedx \
            --output /tmp/application-sbom_cyclonedx.json \
            requirements.txt

      - name: "SPDX: Generate SBOM"
        working-directory: "Phase 1/Python"
        run: |
          /tmp/trivy fs \
            --format spdx-json \
            --output /tmp/application-sbom_spdx.json \
            requirements.txt

      - name: Upload CycloneDX SBOM
        uses: actions/upload-artifact@v4
        with:
          name: application-sbom-cyclonedx
          path: "/tmp/application-sbom_cyclonedx.json"

      - name: Upload SPDX SBOM
        uses: actions/upload-artifact@v4
        with:
          name: application-sbom-spdx
          path: "/tmp/application-sbom_spdx.json"

  Enrich:
    runs-on: ubuntu-latest
    needs: [Container, Application]
    steps:

      # We need to assemble the SBOMs into a hierarchy.
      # https://github.com/CISA-SBOM-Community/SBOM-Generation/issues/22

      - uses: actions/checkout@v4

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4

      - name: "Debug: SBOMs"
        run: |
          find . -iname *.json

      - name: Enrich Container CycloneDX
        run: |
          # We're using `envsubst` here to populate the metadata
          # template from environment variables
          export SBOM_NAME='phase1-python-container'
          cat "Phase 1/Python/sbom/metadata.cdx.json.tmpl" | jq | \
            envsubst > metadata.cdx.json
          unset SBOM_NAME

          # Merge together SBOM and metadata
          jq --slurp '.[0] * .[1]' \
            container-sbom-cyclonedx/container-sbom_cyclonedx.json \
            metadata.cdx.json \
            > /tmp/enriched_container-sbom_cyclonedx.json

      - name: Enrich Application CycloneDX
        run: |
          # We're using `envsubst` here to populate the metadata
          # template from environment variables
          export SBOM_NAME='phase1-python-application'
          cat "Phase 1/Python/sbom/metadata.cdx.json.tmpl" | jq | \
            envsubst > metadata.cdx.json
          unset SBOM_NAME

          # Merge together SBOM and metadata
          jq --slurp '.[0] * .[1]' \
            application-sbom-cyclonedx/application-sbom_cyclonedx.json \
            metadata.cdx.json \
            > /tmp/enriched_application-sbom_cyclonedx.json

      - name: Enrich Container SPDX
        run: |
          # We're using `envsubst` here to populate the metadata
          # template from environment variables
          export SBOM_NAME='phase1-python-container'
          cat "Phase 1/Python/sbom/metadata.spdx.json.tmpl" | jq | \
            envsubst > metadata.spdx.json
          unset SBOM_NAME

          # Merge together SBOM and metadata
          jq --slurp '.[0] * .[1]' \
            container-sbom-spdx/container-sbom_spdx.json \
            metadata.cdx.json \
            > /tmp/enriched_container-sbom_spdx.json

      - name: Enrich Application SPDX
        run: |
          # We're using `envsubst` here to populate the metadata
          # template from environment variables
          export SBOM_NAME='phase1-python-application'
          cat "Phase 1/Python/sbom/metadata.cdx.json.tmpl" | jq | \
            envsubst > metadata.cdx.json
          unset SBOM_NAME

          # Merge together SBOM and metadata
          jq --slurp '.[0] * .[1]' \
            application-sbom-spdx/application-sbom_spdx.json \
            metadata.cdx.json \
            > /tmp/enriched_application-sbom_spdx.json

      - name: Upload Enriched SBOMs
        uses: actions/upload-artifact@v4
        with:
          name: enriched-sboms
          path: "/tmp/enriched_*.json"

  Assemble:
    runs-on: ubuntu-latest
    needs: [Enrich]
    steps:

      # We need to assemble the SBOMs into a hierarchy.
      # https://github.com/CISA-SBOM-Community/SBOM-Generation/issues/22
      #
      # Input files:
      # * container-sbom-cyclonedx/container-sbom_cyclonedx.json
      # * application-sbom-cyclonedx/application-sbom_cyclonedx.json"

      - uses: actions/checkout@v4


  Validate:
    needs: Assemble
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download SBOMs
        uses: actions/download-artifact@v4

      - name: "Debug: SBOMs"
        run: |
          find . -iname *.json
